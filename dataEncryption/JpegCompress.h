//
//  JpegCompress.h
//  dataHiding
//
//  Created by 黄路衔 on 16/3/3.
//  Copyright © 2016年 黄路衔. All rights reserved.
//

#ifndef JpegCompress_h
#define JpegCompress_h

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <string>
#include "bmpStruct.h"
using namespace std;

class Jpeg_Compress {
public:
    Jpeg_Compress();
    ~Jpeg_Compress();
    
    /*获取位图数据*/
    bool read_Bmp(const char *bmpName);
    bool alloc_Mem();
    void read_RGB();
    
    /*按照jpeg编码规则进行图像压缩*/
    void tran_Colorspace();
    void start_Compress(double q);
    void start_Encode();
    void write_Jpeg(const char *jpegName);
    
private:
    /*压缩 jpeg 文件所需要的图像相关信息*/
    int width;                  //图像的宽
    int height;                 //图像的高
    double **Y, **Cb, **Cr;     //储存YCbCr通道原始数据的矩阵
    char *Z_Y, *Z_Cb, *Z_Cr;    //以Zigzag扫描并量化后的YCbCr通道一维数组
    double quality;             //量化因子(>=0.5)，数值越小质量越好
    
    /*原始位图相关数据*/
    unsigned char *pBmpBuf;     //读入位图数据的指针
    RGBQUAD *pColorTable;       //颜色表指针
    int biBitCount;             //图像类型，每像素位数
    int lineByte;               //每一行的字节数
    int oldHeight;              //原始图像的高
    unsigned char **R, **G, **B;//储存RGB通道数据的矩阵
    
    /*哈夫曼表相关信息*/
    string *YDC_Huff_Code, *CDC_Huff_Code, *YAC_Huff_Code, *CAC_Huff_Code;//便于查表
    unsigned char *Ycode, *Cbcode, *Crcode;   //储存三个通道最终的编码
    int YcodeSize, CbcodeSize, CrcodeSize;    //三个通道最终编码的字节数
    /*jpeg储存标准的哈弗曼编码表*/
    const unsigned int YDC_Huff_Table[16] = {0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0};
    const unsigned int YDC_Huff_Value[12] = {0,1,2,3,4,5,6,7,8,9,10,11};
    const unsigned int CDC_Huff_Table[16] = {0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0};
    const unsigned int CDC_Huff_Value[12] = {0,1,2,3,4,5,6,7,8,9,10,11};
    const unsigned int YAC_Huff_Table[16] = {0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,93};
    const unsigned int YAC_Huff_Value[130] = {0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,0x24,0x33,0x62,0x72,0x82,0x16,0x17,0x18,0x25,0x26,0x27,0x28,0x34,0x35,0x36,0x37,0x38,0x43,0x44,0x45,0x46,0x47,0x48,0x53,0x54,0x55,0x56,0x57,0x58,0x63,0x64,0x65,0x66,0x67,0x68,0x73,0x74,0x75,0x76,0x77,0x78,0x83,0x84,0x85,0x86,0x87,0x88,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8};
    const unsigned int CAC_Huff_Table[16] = {0,2,1,2,4,4,3,4,7,4,4,3,0,1,2,89};
    const unsigned int CAC_Huff_Value[130] = {0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,0xa1,0xb1,0xc1,0x23,0x33,0x52,0xf0,0x15,0x62,0x72,0xd1,0x16,0x24,0x34,0xe1,0x25,0xf1,0x17,0x18,0x26,0x27,0x28,0x35,0x36,0x37,0x38,0x43,0x44,0x45,0x46,0x47,0x48,0x53,0x54,0x55,0x56,0x57,0x58,0x63,0x64,0x65,0x66,0x67,0x68,0x73,0x74,0x75,0x76,0x77,0x78,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8};

   
    /*亮度和色度的量化表*/
    const unsigned char Y_Quan_Table[8][8] = {{16,11,10,16,24,40,51,61},{12,12,14,19,26,58,60,55},{14,13,16,24,40,57,69,56},{14,17,22,29,51,87,80,62},{18,22,37,56,68,109,103,77},{24,35,55,64,81,104,113,92},{49,64,78,87,103,121,120,101},{72,92,95,98,112,100,103,99}};
    const unsigned char C_Quan_Table[8][8] = {{17,18,24,47,99,99,99,99},{18,21,26,66,99,99,99,99},{24,26,56,99,99,99,99,99},{47,66,99,99,99,99,99,99},{99,99,99,99,99,99,99,99},{99,99,99,99,99,99,99,99},{99,99,99,99,99,99,99,99},{99,99,99,99,99,99,99,99}};
    
    /*释放申请的内存*/
    void release_RGB();
    void release_YCbCr();
    void release_HuffCode();
    void release_Code();
    
    /*
     将便于储存的哈弗曼编码转化为便于查找的哈弗曼编码
     按顺序依次读出各个哈弗曼编码，以便与解码后的值相对应
     */
    void huff_Code_2_String();
};

#endif /* JpegCompress_h */
